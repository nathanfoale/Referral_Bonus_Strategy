# ==============================
# eToro Referral Bonus Strategy
# ==============================


# eToro Referral Bonus Profit Optimization Strategy step by step:

# Referral Request: The strategy begins by getting up to 10 individuals to set up an eToro account using your referral link. 

# Funding the Account: Once they're registered, you transfer $500 USD to each individualâ€™s bank account.

# Deposit and Investment: The referred individuals deposit the $500 USD into their eToro accounts and invest $100 USD in a stock of their choice. 
# This investment is their reward for participating, as they get to keep the stock.

# Withdrawal Process: After the investment is made, they withdraw the remaining $400 USD from their eToro accounts. 
# This withdrawal will incur a $5 USD fee, leaving them with $395 USD.

# Returning the Funds: The referred individuals then transfer the remaining $395 USD back to your bank account.

# Referral Bonus: For each successful referral, you receive a $200 USD bonus in your eToro account.



# Outcome:
# By repeating this process with 10 individuals, you invest $5,000 USD ($500 per person). After the withdrawals, you recover 
# $3,950 USD ($395 per person) and earn $2,000 USD in referral bonuses, resulting in a net profit of $950 USD



# This section of the code calculates and displays the financial outcomes assuming you successfully 
# refer 10 people to the trading platform. It shows the total initial investment, referral bonus earnings, 
# withdrawn amount after investing $100 per person, the total return, and the net profit from these 10 referrals.

# ======================================
# Example calculations for 10 referrals
# =====================================

# Fixed Variables
initial_investment_per_person <- 500
number_of_people <- 10
referral_bonus_per_person <- 200
withdrawal_fee_per_person <- 5
investment_in_stock <- 100


# Initial Investment 
total_initial_investment <- initial_investment_per_person * number_of_people


# Referral Bonus Reward
total_referral_bonus <- referral_bonus_per_person * number_of_people


# Amount Withdrawn
amount_withdrawn_per_person <- initial_investment_per_person - investment_in_stock - withdrawal_fee_per_person
total_withdrawn <- amount_withdrawn_per_person * number_of_people


# Total Return
total_return <- total_withdrawn + total_referral_bonus


# Net Profit
net_profit <- total_return - total_initial_investment


# Output of Results
cat("Initial Investment: $", total_initial_investment, "\n")
cat("Referral Bonus Total: $", total_referral_bonus, "\n")
cat("Withdrawn Investment Total: $", total_withdrawn, "\n")
cat("Return: $", total_return, "\n")
cat("Net Profit: $", net_profit, "\n")





# This section of the code allows the user to input the number of people they can refer to the trading platform. 
# Based on this input, the program calculates the total initial investment, referral bonus earnings, withdrawn amount, 
# total return, and net profit.

# ========================================
# User Input - Enter Number Of Referrals 
# ========================================


# Function to Calculate Profit Based on User Input

calculate_profit <- function(number_of_referrals, initial_investment_per_person = 500, 
                             referral_bonus_per_person = 200, 
                             withdrawal_fee_per_person = 5, 
                             investment_in_stock = 100) {
  
  # Initial Investment 
  total_initial_outlay <- initial_investment_per_person * number_of_referrals
  
  # Referral Bonus Reward
  total_referral_bonus <- referral_bonus_per_person * number_of_referrals
  
  # Amount Withdrawn
  amount_withdrawn_per_person <- initial_investment_per_person - investment_in_stock - withdrawal_fee_per_person
  total_withdrawn <- amount_withdrawn_per_person * number_of_referrals
  
  # Total Return
  total_return <- total_withdrawn + total_referral_bonus
  
  # Net Profit
  net_profit <- total_return - total_initial_outlay

  # Output of Results
  print(paste("Total Initial Outlay:", total_initial_outlay))
  print(paste("Total Referral Bonus:", total_referral_bonus))
  print(paste("Total Withdrawn:", total_withdrawn))
  print(paste("Total Return:", total_return))
  print(paste("Net Profit:", net_profit))
}


# User input for the number of referrals they want to make

number_of_referrals <- as.numeric(readline(prompt="Enter the number of referrals: "))


# Results
calculate_profit(number_of_referrals)





# =============
# Application
# =============

# This section is an application which lets the user allocate their referral bonuses into different stocks based on how many
# successful referrals they made. 

# Referral Bonus Profit Optimization App is a tool designed to help users maximize the returns from referral bonuses 
# offered by platforms like eToro. The app allows users to simulate how the referral bonuses would've grown if they invested 
# in selected stocks at the current date 365 days ago.

library(rsconnect)
library(shiny)
library(quantmod)

# Get stock and cryptocurrency data from Yahoo Finance
assets <- c("AAPL", "NVDA", "META", "GOOG", "TSLA", "MSFT", "QCOM", "SPY", "AMD", "TSM", "BHP")
getSymbols(assets, src = "yahoo")

ui <- fluidPage(
  titlePanel("Referral Bonus Profit Optimization"),
  
  sidebarLayout(
    sidebarPanel(
      numericInput("num_referrals", 
                   "Enter the number of referrals:", 
                   value = 10, 
                   min = 1, max = 10),  # Referral Max is 10
      
      actionButton("calculate_profit", "Calculate Profit from Referrals"),
      
      hr(),  # Horizontal line for visual separation
      
      selectInput("asset1", 
                  "Choose Asset 1:",
                  choices = assets,
                  selected = "AAPL"),
      
      numericInput("asset1_allocation", 
                   "Allocate % of Referral Bonus to Asset 1:", 
                   value = 50, 
                   min = 0, max = 100),
      
      selectInput("asset2", 
                  "Choose Asset 2:",
                  choices = assets,
                  selected = "NVDA"),
      
      numericInput("asset2_allocation", 
                   "Allocate % of Referral Bonus to Asset 2:", 
                   value = 50, 
                   min = 0, max = 100)
    ),
    
    mainPanel(
      uiOutput("initial_summary"),
      fluidRow(
        column(6, uiOutput("investment_summary1")),
        column(6, uiOutput("investment_summary2"))
      ),
      br(), br(), br(), br(), 
      plotOutput("investment_plot", height = "600px")  # Graph Height
    )
  )
)

server <- function(input, output) {
  
  # Initial Calculation of Profit from Referrals
  observeEvent(input$calculate_profit, {
    total_initial_investment <- 500 * input$num_referrals
    total_referral_bonus <- 200 * input$num_referrals
    total_withdrawn <- (395 * input$num_referrals)
    total_return <- total_withdrawn + total_referral_bonus
    net_profit <- total_return - total_initial_investment
    
    output$initial_summary <- renderUI({
      HTML(paste0("<h3>Profit from Referrals</h3>",
                  "<p><strong>Initial Investment:</strong> $", format(total_initial_investment, big.mark = ","),
                  "<br><strong>Referral Bonus Total:</strong> $", format(total_referral_bonus, big.mark = ","),
                  "<br><strong>Withdrawn Investment Total:</strong> $", format(total_withdrawn, big.mark = ","),
                  "<br><strong>Total Return:</strong> $", format(total_return, big.mark = ","),
                  "<br><strong>Net Profit:</strong> $", format(net_profit, big.mark = ","), "</p>"))
    })
  })
  
  # Investment Summary for Asset 1
  output$investment_summary1 <- renderUI({
    total_referral_bonus <- 200 * input$num_referrals
    asset1_percentage <- input$asset1_allocation / 100
    
    asset1_prices <- get(input$asset1)
    
    start_date <- Sys.Date() - 365
    end_date <- Sys.Date()
    
    asset1_prices_filtered <- asset1_prices[paste(start_date, end_date, sep = "/")]
    
    asset1_start_price <- as.numeric(Cl(asset1_prices_filtered[1]))
    asset1_end_price <- as.numeric(Cl(asset1_prices_filtered[nrow(asset1_prices_filtered)]))
    
    asset1_initial_investment <- total_referral_bonus * asset1_percentage
    asset1_investment_growth <- (asset1_initial_investment / asset1_start_price) * asset1_end_price
    
    asset1_profit_usd <- asset1_investment_growth - asset1_initial_investment
    asset1_percentage_change <- ((asset1_investment_growth - asset1_initial_investment) / asset1_initial_investment) * 100
    
    HTML(paste0("<h4>Investment Summary: ", input$asset1, "</h4>",
                "<p><strong>Initial Stock Price:</strong> $", format(asset1_start_price, big.mark = ","),
                "<br><strong>Current Stock Price:</strong> $", format(asset1_end_price, big.mark = ","),
                "<br><strong>Initial Investment:</strong> $", format(asset1_initial_investment, big.mark = ","),
                "<br><strong>Current Value:</strong> $", format(asset1_investment_growth, big.mark = ","),
                "<br><strong>Profit/Loss:</strong> $", format(asset1_profit_usd, big.mark = ","),
                "<br><strong>Percentage Change:</strong> ", sprintf("%.2f", asset1_percentage_change), "%</p>"))
  })
  
  # Investment Summary for Asset 2
  output$investment_summary2 <- renderUI({
    total_referral_bonus <- 200 * input$num_referrals
    asset2_percentage <- input$asset2_allocation / 100
    
    asset2_prices <- get(input$asset2)
    
    start_date <- Sys.Date() - 365
    end_date <- Sys.Date()
    
    asset2_prices_filtered <- asset2_prices[paste(start_date, end_date, sep = "/")]
    
    asset2_start_price <- as.numeric(Cl(asset2_prices_filtered[1]))
    asset2_end_price <- as.numeric(Cl(asset2_prices_filtered[nrow(asset2_prices_filtered)]))
    
    asset2_initial_investment <- total_referral_bonus * asset2_percentage
    asset2_investment_growth <- (asset2_initial_investment / asset2_start_price) * asset2_end_price
    
    asset2_profit_usd <- asset2_investment_growth - asset2_initial_investment
    asset2_percentage_change <- ((asset2_investment_growth - asset2_initial_investment) / asset2_initial_investment) * 100
    
    HTML(paste0("<h4>Investment Summary: ", input$asset2, "</h4>",
                "<p><strong>Initial Stock Price:</strong> $", format(asset2_start_price, big.mark = ","),
                "<br><strong>Current Stock Price:</strong> $", format(asset2_end_price, big.mark = ","),
                "<br><strong>Initial Investment:</strong> $", format(asset2_initial_investment, big.mark = ","),
                "<br><strong>Current Value:</strong> $", format(asset2_investment_growth, big.mark = ","),
                "<br><strong>Profit/Loss:</strong> $", format(asset2_profit_usd, big.mark = ","),
                "<br><strong>Percentage Change:</strong> ", sprintf("%.2f", asset2_percentage_change), "%</p>"))
  })
  
  output$investment_plot <- renderPlot({
    total_referral_bonus <- 200 * input$num_referrals
    
    asset1_percentage <- input$asset1_allocation / 100
    asset2_percentage <- input$asset2_allocation / 100
    
    asset1_prices <- get(input$asset1)
    asset2_prices <- get(input$asset2)
    
    start_date <- Sys.Date() - 365
    end_date <- Sys.Date()
    
    asset1_prices_filtered <- asset1_prices[paste(start_date, end_date, sep = "/")]
    asset2_prices_filtered <- asset2_prices[paste(start_date, end_date, sep = "/")]
    
    asset1_start_price <- as.numeric(Cl(asset1_prices_filtered[1]))
    asset1_end_price <- as.numeric(Cl(asset1_prices_filtered[nrow(asset1_prices_filtered)]))
    
    asset2_start_price <- as.numeric(Cl(asset2_prices_filtered[1]))
    asset2_end_price <- as.numeric(Cl(asset2_prices_filtered[nrow(asset2_prices_filtered)]))
    
    asset1_initial_investment <- total_referral_bonus * asset1_percentage
    asset2_initial_investment <- total_referral_bonus * asset2_percentage
    
    asset1_investment_growth <- (asset1_initial_investment / asset1_start_price) * asset1_end_price
    asset2_investment_growth <- (asset2_initial_investment / asset2_start_price) * asset2_end_price
    
    asset1_percentage_change <- ((asset1_investment_growth - asset1_initial_investment) / asset1_initial_investment) * 100
    asset2_percentage_change <- ((asset2_investment_growth - asset2_initial_investment) / asset2_initial_investment) * 100
    
    dates <- as.Date(index(asset1_prices_filtered))
    asset1_values <- Cl(asset1_prices_filtered) * (asset1_initial_investment / asset1_start_price)
    asset2_values <- Cl(asset2_prices_filtered) * (asset2_initial_investment / asset2_start_price)
    
    plot(dates, asset1_values, type = "l", col = "blue", lwd = 2, ylim = range(c(asset1_values, asset2_values)),
         ylab = "Value in USD", xlab = "Date", main = "Investment Value Over Time")
    lines(dates, asset2_values, col = "red", lwd = 2)
    legend("topright", legend = c(input$asset1, input$asset2), col = c("blue", "red"), lty = 1, lwd = 2)
    
    text(x = end_date + 5, y = asset1_values[nrow(asset1_prices_filtered)], 
         labels = paste0(sprintf("%.2f", asset1_percentage_change), "%"), pos = 4, 
         col = ifelse(asset1_percentage_change > 0, "green", "red"), cex = 1.2, offset = 1)
    text(x = end_date + 5, y = asset2_values[nrow(asset2_prices_filtered)], 
         labels = paste0(sprintf("%.2f", asset2_percentage_change), "%"), pos = 4, 
         col = ifelse(asset2_percentage_change > 0, "green", "red"), cex = 1.2, offset = 1)
  })
}

shinyApp(ui = ui, server = server)




# Publish App

rsconnect::setAccountInfo(name='nathanfoale',
                          token='F40CADACBE43860C44F39F73D11093EE',
                          secret='RQELdf/o9F4h00zAbVqpElryAB5gjdcsdhpVLw/P')
rsconnect::deployApp('/Users/nathanfoale/Desktop/eToro_Referral_Strategy')


shiny::runApp('/Users/nathanfoale/Desktop/eToro_Referral_Strategy')
